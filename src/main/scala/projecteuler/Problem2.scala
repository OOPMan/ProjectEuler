package projecteuler

/**
 * Created by IntelliJ IDEA.
 * User: adamj
 * Date: 8/2/11
 * Time: 10:45 AM
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * Notes:
 *
 * The first 20 odd Fibs are: 1, 1, 3, 5, 13, 21, 55, 89, 233, 377, 987, 1597, 4181, 6765, 17711, 28657, 75025, 121393, 317811, 514229, 1346269
 * The first 10 even Fibs are: 2, 8, 34, 144, 610, 2584, 10946, 46368, 196418, 832040, 3524578
 * Every 3rd Fibonacci number is even
 */

object Problem2 {
    /**
     * Awesome Lazy Fibonacci generation using a stream. See [scala-user] Anyone have some good Scala Occult Code? from scala-user@googlegroups.com
     */
    lazy val FibonacciStream: Stream[Int] = 1 #:: 1 #:: FibonacciStream.zip(FibonacciStream.tail).map { case (a,b) => a+b }

    /**
     * This function generates a Fibonacci Sequence in an iterative fashion
     */
    def Fibonacci(maxValue: Int): List[Int] = {
        var ret = 1 :: 2 :: Nil
        while(ret.last <= maxValue) {
            ret = ret :+ ret.drop(ret.length - 2).sum
        }
        return ret.dropRight(1)
    }

    /**
     * Used the Fibonacci function above to sum all even numbers in the sequence
     */
    def Stupid(max: Int): Int = {
        return Fibonacci(max).filter(_ % 2 == 0).sum
    }

    //TODO: Create a clever solution
}